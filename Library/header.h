#ifndef LIB_H
#define LIB_H
#define ELEMENT(a,b) [a][b]

#include <assert.h>
#include <stdlib.h>
#include <crtdbg.h>
#include <string.h>
#include <math.h>
#include <stdio.h>
#include <ctype.h>

/**
 * @mainpage Introduction

 LibMatrix - библиотека для работы с матрицами произвольного размера.
 При использовании matrix_t нужно помнить о памяти - не забывайте очищать память, 
 если собираетесь переинициализировать матрицу, во избежание утечек памяти.
 */


/**
 * @defgroup Matrix_functions Create
 *
 * Функции создания и удаления матрицы.
 *
 * @{
 */

/// Параметры инициализации матрицы.
typedef struct {
  double ** matrix;	///< двумерный динамический массив со значениями матрицы
  int height;		///< количество строк в матрице
  int width;		///< количество столббцов в матрице
} matrix_t;
/**
 * @brief Создать матрицу.
 *
 * Перед работой с матрицей, необходимо создать ее. 
 * При этом заполняется структура
 * 
 * @param height количество строк матрицы
 * @param width количество столбцов матрицы
 * 
 * @return созданную матрицу (структуру)
 * @see MatrixDestroy
 */
matrix_t MatrixCreate(int height, int width);
/**
 * @brief Удалить матрицу.
 *
 * После работы с матрицей, необходимо удалить ее. 
 * При этом очищается выделенная под эту матрицу память
 * 
 * @param a очищаемая матрица
 * 
 * @return созданную матрицу (структуру)
 * @see MatrixCreate
 */
void MatrixDestroy(matrix_t a);
/**
 * @defgroup Matrix_functions Operations
 *
 * Функции для работы с матрицей, такие как сложение, вычитаение,
 * умножение (на матрицу, на число), заполнение (единичной, нулевой),
 * произведение чисел главной диагонали, транспонирование.
 *
 * @{
 */

/**
 * @brief сложение матриц.
 *
 * при сложении параметры ширины и высоты матриц должны совпадать,
 * это обязательное условие сложения матриц.
 * 
 * @param a первая матрица для сложения
 * @param b вторая матрица для сложения
 * 
 * @return новую матрицу - результат сложения двух других. Если 
 * сложение не удалось - нулевую матрицу (указатель на первый
 * параметр матрицы будет == NULL)
 * @see MatrixSub, MatrixMul, MatrixMulDouble, MatrixTrance
 */
matrix_t MatrixAdd(matrix_t a, matrix_t b);
/**
 * @brief умножение матриц.
 * 
 * при умножении количество столбцов первой матрицы должно равняться
 * количеству строк второй (обязательное условнние умножения матриц).
 * 
 * @param a первая матрица для умножения
 * @param b вторая матрица для умножения
 * 
 * @return новую матрицу - результат произведения двух других 
 * @param a * @param b. Если умножение не удалось - нулевую матрицу
 * (указатель на первый параметр матрицы будет == NULL)
 * @see MatrixAdd, MatrixSub, MatrixMulDouble, MatrixTrance
 */
matrix_t MatrixMul(matrix_t a, matrix_t b);
/**
 * @brief вычитание матриц.
 *
 * при вычитании параметры ширины и высоты матриц должны совпадать,
 * это обязательное условие сложения матриц.
 * 
 * @param a матрица, из которой вычитают
 * @param b вычитаемая матрица
 * 
 * @return новую матрицу - результат разности двух других. Если 
 * вычитание не удалось - нулевую матрицу (указатель на первый
 * параметр матрицы будет == NULL)
 * @see MatrixSub, MatrixMul, MatrixMulDouble, MatrixTrance
 */
matrix_t MatrixSub(matrix_t a, matrix_t b);
/**
 * @brief Умножение матрицы на число.
 * 
 * @param a матрица
 * @param number вещественное число, на которое умножается матрица
 * 
 * @return новую матрицу - результат умножения матрицы на число.
 * @see MatrixSub, MatrixMul, MatrixAdd, MatrixTrance
 */
matrix_t MatrixMulDouble(matrix_t a, double number);
/**
 * @brief Произведение чисел главной диагонали матрицы.
 *
 * параметры ширины и высоты матрицы должны быть равны
 * (квадратная матрица).
 * 
 * @param a матрица
 * 
 * @return вещественное число - результат произведения.
 * @see MatrixSub, MatrixMul, MatrixMulDouble, MatrixAdd
 */
double MatrixTrance(matrix_t a);
/**
 * @brief транспонирование матрицы.
 * 
 * @param a матрица
 * 
 * @return новая матрица - результат транспонирования исходной.
 * @see MatrixSetZero, MatrixSetIdentity
 */
matrix_t MatrixTranspose(matrix_t a);
/**
 * @brief Заполнение матрицы нулями.
 * 
 * Подаваемая на вход матрица заполняется нулями. При этом старые 
 * значения будут стерты
 * 
 * @param a матрица
 * 
 * @see MatrixTranspose, MatrixSetIdentity
 */
void MatrixSetZero(matrix_t a);
/**
 * @brief Заполнение единичной матрицы.
 * 
 * Подаваемая на вход матрица заполняется как единичная. При этом 
 * старые значения будут стерты. Обязательное условие - матрица 
 * должна быть квадратной. Если матрица не будет квадратной - подаваемая
 * на вход матрица станет нулевой (указатель на первый параметр матрицы 
 * будет == NULL)
 * 
 * @param a матрица
 * 
 * @see MatrixTranspose, MatrixSetIdentity
 */
void MatrixSetIdentity(matrix_t a);
/**
 * @brief Определитель матрицы.
 * 
 * Функция считает определитель подаваемой на вход матрицы Обязательное
 * условие - матрица должна быть квадратной. 
 * 
 * @param a матрица
 * 
 * @return вещественное число - определитель матрицы
 *
 * @see MatrixDeterminant
 */
long double MatrixDeterminant(matrix_t argument);
/**
 * @brief Обратная матрица.
 * 
 * Функция вычисляет обратную матрицу, если она есть. Если
 * обратной матрицы нет - поданая на вход матрица не изменяется.
 * 
 * @param a матрица
  * @return обратная матрица к a
 * 
 * @see ReverseMatrix
 */
matrix_t ReverseMatrix(matrix_t a);
/**
 * @defgroup Matrix_functions Write-Read
 *
 * Функции для считывания и вывода матриц. Работа происходит 
 * с подаваемым потоком.
 *
 * @{
 */
/**
 * @brief Вывод матрицы.
 * 
 * Функция выводит матрицу в стандартном формате, в виде {{a,b},{c,d}}
 * Для работы с этой функцией надо указать поток, с которым мы будем 
 * работать. Это либо файл, который пользователь предварительно открыл для записи,
 * либо стандартный поток, в таком случае передается <code>stream = stdout</code>.
 * 
 * @param stream поток для вывода
 * @param matrix матрица
 *
 * @see MatrixRead, MatrixPrint
 */
void MatrixWrite(FILE * stream, matrix_t matrix);
/**
 * @brief Считывание матрицы.
 * 
 * Функция считывает матрицу в стандартном формате, в виде {{a,b},{c,d}}, допускаются
 * пробельные символы.Для работы с этой функцией надо указать поток, с которым мы будем 
 * работать. Это либо файл, который пользователь предварительно открыл для записи,
 * либо стандартный поток, в таком случае передается <code>stream = stdin</code>.
 * 
 * @param stream поток для ввода
 *
 * @return матрица. Если выражение было ошибочнное или произошли какие-то другие проблемы,
 * вернется нулевая матрца (указатель первого параметра будет == NULL)
 * @see MatrixWrite, MatrixPrint
 */
matrix_t MatrixRead(FILE * stream);
/**
 * @brief Напечатать матрицу.
 * 
 * Функция выводит матрицу в удобной наглядной форме, как мы привыкли, в консоль
 * 
 * @param a матрица
 *
 * @see MatrixWrite, MatrixRead
 */
void MatrixPrint(matrix_t a);

#endif